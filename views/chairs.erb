<!DOCTYPE html>
<html>
<head>
	<title>Chairs</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>	
	<link rel="stylesheet" type="text/css" href="css/chairs.css">
</head>
<body>

	<canvas id="canvas" width="600" height="600"></canvas>
	

	<script type="text/javascript">
	$(document).ready(function(){
		//canvas setup
		var startX, startY;
		var isDown = false;
		var canvas = document.getElementById("canvas");
		if(canvas.getContext){
			var context = canvas.getContext("2d");
			setNodes();
		}
		

		function getRandomInt(min, max) {
			return Math.floor(Math.random() * (max - min)) + min;
		}


		//set nodes. Counting starts at leftmost carbon and counts clockwise.''

		function setNodes(){
			console.log('setNodes');
			var topNodes = [[116,108], [266,141], [414,105], [492, 225], [345, 191], [195,227]];
			var botNodes = [[109,494], [185,376], [336,414], [481,375], [405,495], [257,455]];
			
			//choose a node to draw from 
			var rand = getRandomInt(0, topNodes.length);
			primaryNode = topNodes[rand];

			//draw nodes top
			for(var i = 0; i < topNodes.length; i++){
				var x = topNodes[i][0];
				var y = topNodes[i][1];
				context.beginPath();
				if(x === primaryNode[0] && y === primaryNode[1]){
					context.strokeStyle = 'green';
				}
				else{
					context.strokeStyle = 'black';
				}
				context.arc(x,y,10,0,2*Math.PI);
				context.stroke();

			}
			//draw bottom nodes
			for(var i = 0; i < botNodes.length; i++){
				var x = botNodes[i][0];
				var y = botNodes[i][1];
				context.beginPath();
				context.arc(x,y,10,0,2*Math.PI);
				context.stroke();
			}
			
			

		}

		//getBoundingClientRect returns the dimensions of the canvas element including offsets such as a border. This is used to adjust the mouse coordinates returned so that they correspond to the canvas directly and consistently.
		function mousePosition(evt){
			var rect = canvas.getBoundingClientRect();
			var x = Math.round((evt.clientX-rect.left)/(rect.right-rect.left)*canvas.width);
			var y = Math.round((evt.clientY-rect.top)/(rect.bottom-rect.top)*canvas.height);
			var array = [x, y];
			return array
		}

		function drawLine(x,y){
			context.beginPath();
			context.moveTo(primaryNode[0],primaryNode[1]);
			context.lineTo(x, y);
			context.closePath();
			context.stroke();
		}

		$('#canvas').on('mousedown', function(evt){
			evt.stopPropagation();
      		evt.preventDefault();

			var downPositions = mousePosition(evt);

			startX = downPositions[0];
			startY = downPositions[1];
			isDown = true;
	    });


		$('#canvas').on('mouseup', function(evt){
			evt.stopPropagation();
      		evt.preventDefault();
			upPositions = mousePosition(evt);
			isDown = false;
			var x = upPositions[0];
			var y = upPositions[1];
			if(intersects(startX, startY, primaryNode[0], primaryNode[1], 10)){
				drawLine(x,y);
			}
		});

		// $('#canvas').on('mousemove', function(evt) {
		// 	if(!isDown){return;}
		// 	evt.stopPropagation();
  //     		evt.preventDefault();
      		
		// });

		//just for logging
		$('#canvas').on('click', function(evt){
			// var rect = canvas.getBoundingClientRect();
			// var x = Math.round((evt.clientX-rect.left)/(rect.right-rect.left)*canvas.width);
			// var y = Math.round((evt.clientY-rect.top)/(rect.bottom-rect.top)*canvas.height);
	   		var positions = mousePosition(evt);
	   		var x = positions[0];
	   		var y = positions[1];
		    console.log(x,y);

		    if(intersects(x,y,116,108,10)){
		    	console.log("intersects");
		    }
		});

		
		
		//http://stackoverflow.com/questions/2212604/javascript-check-mouse-clicked-inside-the-circle-or-polygon/2212851#2212851
		function intersects(x, y, cx, cy, r) {
			var dx = x - cx;
			var dy = y - cy;
			return dx * dx + dy * dy <= r * r;
		}
		//TODO list:
		// drag and drop line only from node.
		//calculate degrees rotated from origin (node)
		//randomize node appearance.
		//draw template and allow drawing only from corresponding node on opposite chair.
		//scoring
	});
	</script>
</body>
</html>