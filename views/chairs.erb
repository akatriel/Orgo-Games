<!DOCTYPE html>
<html>
<head>
	<title>Chairs</title>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>	
	<link rel="stylesheet" type="text/css" href="css/chairs.css">
</head>
<body>

	<canvas id="canvas" width="600" height="600"></canvas>
	

	<script type="text/javascript">
	$(document).ready(function(){
		var canvas = document.getElementById("canvas");
		if(canvas.getContext){
			var context = canvas.getContext("2d");
			setNodes();
		}
		
		//set nodes. Counting starts at leftmost carbon and counts clockwise.''

		function setNodes(){
			console.log('setNodes');
			var topNodes = [[116,108], [266,141], [414,105], [492, 225], [345, 191], [195,227]];
			var botNodes = [[109,494], [185,376], [336,414], [481,375], [405,495], [257,455]];
			console.log()
			for(var i = 0; i < topNodes.length; i++){
				var x = topNodes[i][0];
				var y = topNodes[i][1];
				context.beginPath();
				context.arc(x,y,10,0,2*Math.PI);
				context.stroke();
			}
		}

		//getBoundingClientRect returns the dimensions of the canvas element including offsets such as a border. This is used to adjust the mouse coordinates returned so that they correspond to the canvas directly and consistently.


		$('#canvas').on('click', function(evt){
			var rect = canvas.getBoundingClientRect();
			var x = Math.round((evt.clientX-rect.left)/(rect.right-rect.left)*canvas.width);
			var y = Math.round((evt.clientY-rect.top)/(rect.bottom-rect.top)*canvas.height);
	        
		    console.log(x,y);
		});

	//TODO list:
	// drag and drop line only from node.
	//calculate degrees rotated from origin (node)
	//randomize node appearance.
	//scoring








	// 	$('#canvas').mousedown(function(e){
	// 		var mouseX = e.pageX - this.offsetLeft;
	// 		var mouseY = e.pageY - this.offsetTop;
				
	// 		paint = true;
	// 		addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop);
	// 		redraw();
	// 	});	

	// 	$('#canvas').mousemove(function(e){
 //  			if(paint){
 //    			addClick(e.pageX - this.offsetLeft, e.pageY - this.offsetTop, true);
 //    			redraw();
 //  			}
	// 	});
	// 	$('#canvas').mouseup(function(e){
 //  			paint = false;
	// 	});
	// 	$('#canvas').mouseleave(function(e){
 //  			paint = false;
	// 	});


	// 	var clickX = new Array();
	// 	var clickY = new Array();
	// 	var clickDrag = new Array();
	// 	var paint;

	// 	function addClick(x, y, dragging)
	// 	{
	// 	  clickX.push(x);
	// 	  clickY.push(y);
	// 	  clickDrag.push(dragging);
	// 	}


	// 	function redraw(){
	// 		context.clearRect(0, 0, context.canvas.width, context.canvas.height); // Clears the canvas

	// 		context.strokeStyle = "#df4b26";
	// 		context.lineJoin = "round";
	// 		context.lineWidth = 5;
					
	// 		for(var i=0; i < clickX.length; i++) {		
	// 			context.beginPath();
	// 			if(clickDrag[i] && i){
	// 		  		context.moveTo(clickX[i-1], clickY[i-1]);
	// 		 	}
	// 		 	else{
	// 		  		context.moveTo(clickX[i]-1, clickY[i]);
	// 		 	}
	// 			context.lineTo(clickX[i], clickY[i]);
	// 			context.closePath();
	// 			context.stroke();
	// 		}
	// 	}
	});
	</script>
</body>
</html>